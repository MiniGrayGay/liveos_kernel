name: Kernel Build

on:
  workflow_dispatch:  # 允许手动触发
    inputs:
      kernel_name:
        description: "Kernel name (e.g., linux-6.1.112)"
        required: true
        default: "linux-6.1.112"
      kernel_url:
        description: "Kernel download URL (optional)"
        required: false
        default: ""  # 留空时自动生成 URL

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # 检出代码
    - name: Checkout repository
      uses: actions/checkout@v4

    # 安装编译依赖和 wget
    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y build-essential libncurses-dev bison flex libssl-dev libelf-dev wget xz-utils

    # 确定内核链接并下载源码
    - name: Prepare kernel source
      run: |
        kernel_name="${{ inputs.kernel_name }}"
        if [ -z "${{ inputs.kernel_url }}" ]; then
          major_version=$(echo "$kernel_name" | cut -d '.' -f 1 | grep -o '[0-9]*$')
          KERNEL_URL="https://cdn.kernel.org/pub/linux/kernel/v${major_version}.x/${kernel_name}.tar.xz"
          echo "No URL provided, automatically determined URL: $KERNEL_URL"
        else
          KERNEL_URL="${{ inputs.kernel_url }}"
          echo "Using provided URL: $KERNEL_URL"
        fi

        wget -O "${kernel_name}.tar.xz" "$KERNEL_URL"
        tar -xf "${kernel_name}.tar.xz"

    # 使用仓库中的 .config 文件配置内核
    - name: Configure kernel
      run: |
        cd "${{ inputs.kernel_name }}"
        cp $GITHUB_WORKSPACE/.config .
        make KCONFIG_ALLCONFIG=/dev/null oldconfig

    # 编译内核
    - name: Build kernel
      run: |
        cd "${{ inputs.kernel_name }}"
        make -j$(nproc)
        mkdir -p $GITHUB_WORKSPACE/output
        cp arch/x86/boot/bzImage "$GITHUB_WORKSPACE/output/${{ inputs.kernel_name }}.bzImage"

    # 上传生成的 bzImage 文件
    - name: Upload bzImage
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.kernel_name }}.bzImage
        path: output/
